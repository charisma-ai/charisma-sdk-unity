using System;
using System.Collections.Generic;
using UnityEngine.Scripting;

namespace CharismaSDK.Events
{
    [Preserve]
    [Serializable]
    public class StartTypingEvent
    {
        public string conversationUuid;
    }

    [Preserve]
    [Serializable]
    public class StopTypingEvent
    {
        public string conversationUuid;
    }

    [Preserve]
    [Serializable]
    public class ProblemEvent
    {
        public string type;
        public string error;
    }

    public enum MessageType
    {
        character,
        media,
        panel
    }

    [Preserve]
    [Serializable]
    public class MessageEvent
    {
        /// <summary>
        /// The conversation uuid of the message.
        /// </summary>
        public string conversationUuid;

        /// <summary>
        /// The type of this message.
        /// </summary>
        public MessageType messageType;

        /// <summary>
        /// Contents of the message.
        /// </summary>
        public Message message;

        /// <summary>
        /// True if the node this message was generated from has "End Story" activated.
        /// </summary>
        public bool endStory;

        /// <summary>
        /// True if the node this message was generated from has "Tap To Continue" activated.
        /// </summary>
        public bool tapToContinue;

        /// <summary>
        /// List of emotions that have changed since the last emitted node.
        /// </summary>
        public Emotion[] emotions;

        /// <summary>
        /// List of memories that have changed since the last emitted node.
        /// </summary>
        public Memory[] memories;

        public long eventId;
        public ulong timestamp;
    }

    /// <summary>
    /// Contains data related to a characters response such as, text, audio etc.
    /// </summary>
    [Preserve]
    [Serializable]
    public class Message
    {
        /// <summary>
        /// The text of the response.
        /// </summary>
        public string text;

        /// <summary>
        /// The character that spoke / said something.
        /// </summary>
        public Character character;

        /// <summary>
        /// The audio information generated by the speech on this node
        /// </summary>
        public Speech speech;

        /// <summary>
        /// Metadata attached to this node.
        /// </summary>
        public Dictionary<string, string> metadata;
    }

    [Preserve]
    [Serializable]
    public class Speech
    {
        /// <summary>
        /// Audio information from this response.
        /// </summary>
        public byte[] audio;

        /// <summary>
        /// Duration of the audio from this response.
        /// </summary>
        public float duration;

        /// <summary>
        /// The encoding selected for the audio clip.
        /// </summary>
        public string encoding;
    }

    [Preserve]
    [Serializable]
    public class Character
    {
        /// <summary>
        /// Id of this character.
        /// </summary>
        public int id;

        public string name;

        /// <summary>
        /// Url string of this character's avatar.
        /// </summary>
        public string avatar;
    }

    [Preserve]
    [Serializable]
    public class Memory
    {
        /// <summary>
        /// Recall value of this memory
        /// </summary>
        public string recallValue;

        /// <summary>
        /// Save value of this memory
        /// </summary>
        public string saveValue;
    }

    [Preserve]
    [Serializable]
    public class Emotion
    {
        public int id;
        public string name;
        public float moodPositivity;
        public float moodEnergy;
        public float playerRelationship;
        public ActiveEffect[] activeEffects;
    }

    [Preserve]
    [Serializable]
    public class ActiveEffect
    {
        public int id;
        public string feeling;
        public float intensity;
        public int replyPropertiesId;
        public int characterId;
        public string type;
        public int durationRemaining;
    }
}
