using System;
using Newtonsoft.Json;
using UnityEngine;
//using Object = UnityEngine.Object;
using Colyseus;
using System.Collections.Generic;

namespace CharismaSDK
{
    /// <summary>
    /// Interact with Charisma using this object.
    /// </summary>
    public class Playthrough
    {
        #region Static Variables

        private const string BaseUrl = "wss://play.charisma.ai";

        #endregion

        #region Properties

        /// <summary>
        /// Returns true if the socket is open.
        /// </summary>
        public bool IsConnected => _room != null && _room.colyseusConnection.IsOpen;

        /// <summary>
        /// The last token that was generated.
        /// </summary>
        public string Token { get; }

        /// <summary>
        /// The UUID of the playthrough.
        /// </summary>
        public string PlaythroughUuid { get; }

        /// <summary>
        /// A successful connection to the socket has been made. Charisma is ready to start play.
        /// </summary>
        public bool IsReadyToPlay { get; set; }

        /// <summary>
        /// Assign a new Speech config.
        ///  - To add speech, pass in a new speech config.
        ///  - To remove audio, set this to null.
        /// </summary>
        public SpeechOptions SpeechOptions { get; set; }

        #endregion

        #region Degelates

        public delegate void MessageDelegate(Events.MessageEvent message);
        public delegate void StartTypingDelegate(Events.StartTypingEvent message);
        public delegate void StopTypingDelegate(Events.StopTypingEvent message);

        #endregion

        #region Events

        /// <summary>
        /// Called when a new message has been generated by Charisma.
        /// </summary>
        public event MessageDelegate OnMessage;

        /// <summary>
        /// Called when a character has started typing.
        /// </summary>
        public event StartTypingDelegate OnStartTyping;

        /// <summary>
        /// Called when a character has stopped typing.
        /// </summary>
        public event StopTypingDelegate OnStopTyping;

        #endregion

        #region MemberVariables

        private ColyseusClient _client;
        private ColyseusRoom<object> _room;

        #endregion

        #region Constructors

        /// <summary>
        /// Interaction with Charisma
        /// </summary>
        /// <param name="token">A valid play-though token.</param>
        public Playthrough(string token, string playthroughUuid, SpeechOptions speechOptions = null)
        {
            Token = token;
            PlaythroughUuid = playthroughUuid;
            SpeechOptions = speechOptions;
        }

        ~Playthrough()
        {
            Disconnect();
        }

        #endregion

        #region Connect / Disconnect

        /// <summary>
        /// Connect to Charisma
        /// </summary>
        /// <param name="onReadyCallback">Called when successfully connected to Charisma.</param>
        public async void Connect(Action onReadyCallback)
        {
            if (IsConnected) return;

            ColyseusClient client = new ColyseusClient(BaseUrl);

            Dictionary<string, object> roomOptions = new Dictionary<string, object>
            {
                ["token"] = Token,
                ["playthroughId"] = PlaythroughUuid
            };

            ColyseusRoom<dynamic> room = await client.JoinOrCreate(
                "chat",
                roomOptions
            );

            _room = room;

            room.OnJoin += () =>
            {
                CharismaLogger.Log("Connected to socket");
            };

            room.OnError += (code, message) =>
            {
                Debug.LogError(code);
                Debug.LogError(message);
            };

            room.OnMessage<string>("status", (status) =>
            {
                if (status == "ready")
                {
                    CharismaLogger.Log("Ready to begin play");
                    IsReadyToPlay = true;

                    onReadyCallback?.Invoke();
                }
                else
                {
                    Debug.LogError("Charisma: Failed to set up websocket connection to server");
                }
            });

            room.OnMessage<Events.MessageEvent>("message", (message) =>
            {
                CharismaLogger.Log("Event received: `message`");
                OnMessage?.Invoke(message);

                //MainThreadConsumer.Instance.Enqueue((async () =>
                //{
                //    OnMessage?.Invoke(deserialized.ConversationId, deserialized);
                //}));
            });

            room.OnMessage<Events.StartTypingEvent>("start-typing", (message) =>
            {
                CharismaLogger.Log("Event received: `start-typing`");
                OnStartTyping?.Invoke(message);
            });

            room.OnMessage<Events.StopTypingEvent>("stop-typing", (message) =>
            {
                CharismaLogger.Log("Event received: `stop-typing`");
                OnStopTyping?.Invoke(message);
            });

            room.OnMessage<Events.ProblemEvent>("problem", (message) =>
            {
                CharismaLogger.Log("Event received: `problem`");
                CharismaLogger.Log(message.error);
            });
        }

        // Disconnect from the current interaction.
        public void Disconnect()
        {
            if (!IsConnected) return;

            try
            {
                _room.Leave();
                _room = null;

                IsReadyToPlay = false;
            }
            catch (Exception e)
            {
                Debug.LogError($"Charisma: failed to disconnect: {e}");
                return;
            }

            CharismaLogger.Log("Successfully disconnected");
        }

        #endregion

        #region Interaction

        public void SetSpeechConfig(SpeechOptions speechOptions)
        {
            SpeechOptions = speechOptions;
        }

        /// <summary>
        /// Start the story from selected scene.
        /// </summary>
        /// <param name="conversationUuid">Id of the conversation we want to start.</param>
        /// <param name="sceneIndex">The scene to start from.</param>
        public void Start(string conversationUuid, int sceneIndex)
        {
            if (!IsReadyToPlay)
            {
                Debug.LogError("Charisma: Socket not open. Connect before starting the interaction");
                return;
            };

            var startOptions = new StartOptions(conversationUuid, sceneIndex, SpeechOptions);

            CharismaLogger.Log("Sending `start` event to Charisma");
            _room?.Send("start", startOptions);
        }

        /// <summary>
        /// Start the story from selected scene.
        /// </summary>
        /// <param name="conversationUuid">Id of the conversation we want to resume.</param>
        public void Resume(string conversationUuid)
        {
            if (!IsReadyToPlay)
            {
                Debug.LogError("Charisma: Socket not open. Connect before resuming the interaction");
                return;
            };

            var resumeOptions = new ResumeOptions(conversationUuid, SpeechOptions);

            CharismaLogger.Log("Sending `resume` event to Charisma");
            _room?.Send("resume", resumeOptions);
        }

        /// <summary>
        /// Send a tap event to Charisma.
        /// </summary>
        /// <param name="conversationUuid">Id of the conversation the tap should be sent to.</param>
        public void Tap(string conversationUuid)
        {
            if (!IsReadyToPlay)
            {
                Debug.LogError("Charisma: Socket not open. Connect before starting the interaction");
                return;
            };

            var tapOptions = new Tap(conversationUuid, SpeechOptions);

            CharismaLogger.Log("Sending `tap` event to Charisma");
            _room?.Send("tap", tapOptions);
        }


        /// <summary>
        /// Send player response to Charisma.
        /// </summary>
        /// <param name="message">Message to send.</param>
        /// <param name="conversationUuid">Conversation to interact with.</param>
        public void Reply(string conversationUuid, string message)
        {
            if (!IsReadyToPlay)
            {
                Debug.LogError("Charisma: Socket not open. Connect before starting the interaction");
                return;
            };

            var playerMessage = new Reply(message, conversationUuid, SpeechOptions);

            CharismaLogger.Log($"Sending `reply` event to Charisma:\nMessage: {message}\nConversation: {conversationUuid}");
            _room?.Send("reply", playerMessage);
        }

        #endregion
    }

    public class Reply
    {
        public string conversationUuid;
        public string text;
        public SpeechOptions speechConfig;

        /// <summary>
        /// Player response to Charisma.
        /// </summary>
        /// <param name="text">Message to send</param>
        /// <param name="speechConfig">Changes the speech settings of the interaction.
        ///  - Don't pass unless you want to change settings.'</param>
        /// <param name="conversationUuid">Id of the conversation to send the reply to.</param>
        public Reply(string text, string conversationUuid, SpeechOptions speechConfig = null)
        {
            this.text = text;
            this.speechConfig = speechConfig;
            this.conversationUuid = conversationUuid;
        }
    }

    public class Tap
    {
        public string conversationUuid;
        public SpeechOptions speechConfig;

        public Tap(string conversationUuid, SpeechOptions speechConfig = null)
        {
            this.conversationUuid = conversationUuid;
            this.speechConfig = speechConfig;
        }
    }

    public class StartOptions
    {
        /// <summary>
        /// Options with which to start the interaction with Charisma.
        /// </summary>
        /// <param name="conversationUuid">Id of the conversation to start.</param>
        /// <param name="sceneIndex">Index of the scene to start.</param>
        /// <param name="speechConfig">To use speech, pass speech options.</param>
        public StartOptions(string conversationUuid, int sceneIndex, SpeechOptions speechConfig = null)
        {
            this.conversationUuid = conversationUuid;
            this.sceneIndex = sceneIndex;
            this.speechConfig = speechConfig;
        }

        public string conversationUuid { get; set; }
        public int sceneIndex { get; }
        public SpeechOptions speechConfig { get; }
    }

    public class ResumeOptions
    {
        /// <summary>
        /// Options with which to resume a playthrough in Charisma.
        /// </summary>
        /// <param name="conversationUuid">Id of the conversation to resume.</param>
        /// <param name="speechConfig">To use speech, pass speech options.</param>
        public ResumeOptions(string conversationUuid, SpeechOptions speechConfig = null)
        {
            this.conversationUuid = conversationUuid;
            this.speechConfig = speechConfig;
        }

        public string conversationUuid { get; set; }
        public SpeechOptions speechConfig { get; }
    }

    public class CharismaError
    {
        public string Error { get; }

        [JsonConstructor]
        public CharismaError(string error)
        {
            Error = error;
        }
    }
}
