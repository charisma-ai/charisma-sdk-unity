using System;
using BestHTTP;
using BestHTTP.Logger;
using BestHTTP.SocketIO;
using BestHTTP.SocketIO.JsonEncoders;
using BestHTTP.SocketIO.Transports;
using Newtonsoft.Json;
using PlatformSupport.Collections.ObjectModel;
using UnityEngine;
using Object = UnityEngine.Object;
using System.Threading.Tasks;

namespace CharismaSDK
{
    /// <summary>
    /// Interact with Charisma using this object.
    /// </summary>
    public class Playthrough
    {
        #region Static Variables

        private const string BaseUrl = "https://api.charisma.ai";

        #endregion

        #region Static Methods

        public static void Setup()
        {
            try
            {
                // Create the coroutine consumer
                Object.Instantiate(Resources.Load<MainThreadConsumer>("Prefabs/MainThreadConsumer"));
            }
            catch (Exception e)
            {
                Debug.LogError($"Error: Failed to set up properly! {e}");
                throw;
            }

            CharismaLogger.Log("Playthrough successfully set up.");
        }

        #endregion

        #region Properties

        /// <summary>
        /// Returns true if the socket is open.
        /// </summary>
        public bool IsConnected => _socket != null && _socket.IsOpen;

        /// <summary>
        /// The last token that was generated.
        /// </summary>
        public string Token { get; }

        /// <summary>
        /// A successful connection to the socket has been made. Charisma is ready to start play.
        /// </summary>
        public bool IsReadyToPlay { get; set; }

        /// <summary>
        /// Assign a new Speech config.
        ///  - To add speech, pass in a new speech config.
        ///  - To remove audio, set this to null.
        /// </summary>
        public SpeechOptions SpeechOptions
        {
            get { return _speechOptions; }
            set { _speechOptions = value; }
        }

        #endregion

        #region Degelates

        public delegate void MessageDelegate(int conversationId, Events.MessageEvent message);
        public delegate void TypingDelegate(int conversationId);

        #endregion

        #region Events

        /// <summary>
        /// Called when a new message has been generated by Charisma.
        /// </summary>
        public event MessageDelegate OnMessage;

        /// <summary>
        /// Called when a character has started typing.
        /// </summary>
        public event TypingDelegate OnStartTyping;

        /// <summary>
        /// Called when a character has stopped typing.
        /// </summary>
        public event TypingDelegate OnStopTyping;

        #endregion

        #region MemberVariables

        private SocketManager _socketManager;
        private Socket _socket;
        private SpeechOptions _speechOptions;
        private MainThreadConsumer _mainThreadConsumer;

        #endregion

        #region Constructors

        /// <summary>
        /// Interaction with Charisma
        /// </summary>
        /// <param name="token">A valid play-though token.</param>
        public Playthrough(string token)
        {
            Token = token;
        }

        /// <summary>
        /// Interaction with Charisma
        /// </summary>
        /// <param name="token">A valid play-though token.</param>
        /// <param name="loglevel">Log levels for advanced debugging.</param>
        public Playthrough(string token, Loglevels loglevel)
        {
            Token = token;
            HTTPManager.Logger.Level = loglevel;
        }

        ~Playthrough()
        {
            Disconnect();
        }

        #endregion

        #region Connect / Disconnect

        /// <summary>
        /// Connect to Charisma
        /// </summary>
        /// <param name="onReadyCallback">Called when successfully connected to Charisma.</param>
        public void Connect(Action onReadyCallback)
        {
            if (IsConnected) return;

            var options = new SocketOptions
            {
                ConnectWith = TransportTypes.WebSocket,
                AdditionalQueryParams = new ObservableDictionary<string, string> { { "token", Token } }
            };

            _socketManager = new SocketManager(new Uri($"{BaseUrl}/socket.io/"), options)
            {
                Encoder = new LitJsonEncoder()
            };

            _socket = _socketManager.GetSocket("/play");

            _socket.On(SocketIOEventTypes.Connect, (socket, packet, args) =>
            {
                CharismaLogger.Log("Connected to socket");
            });

            _socket.On("error", (socket, packet, args) =>
            {
                Debug.LogError(args[0].ToString());
            });

            _socket.On("status", (socket, packet, args) =>
            {
                if ((string)args[0] == "ready")
                {
                    CharismaLogger.Log("Ready to begin play");
                    IsReadyToPlay = true;

                    onReadyCallback?.Invoke();
                }
                else
                {
                    Debug.LogError("Charisma: Failed to set up websocket connection to server");
                }
            });

            _socket.On("message", (socket, packet, args) =>
            {
                CharismaLogger.Log("Event received: `message`");

                MainThreadConsumer.Instance.Enqueue((async () =>
                {
                    // Remove the `['message', ` at the front and the `]` at the back.
                    var modifiedString = packet.Payload.Remove(packet.Payload.Length - 1, 1).Remove(0, 11);
                    var deserialized = await Task.Run(() => JsonConvert.DeserializeObject<Events.MessageEvent>(modifiedString));

                    OnMessage?.Invoke(deserialized.ConversationId, deserialized);
                }));
            });

            _socket.On("start-typing", (socket, packet, args) =>
            {
                CharismaLogger.Log("Event received: `start-typing`");

                var deserialized = JsonConvert.DeserializeObject<Conversation>(packet.Payload);
                OnStartTyping?.Invoke(deserialized.ConversationId);
            });

            _socket.On("stop-typing", (socket, packet, args) =>
            {
                CharismaLogger.Log("Event received: `stop-typing`");

                var deserialized = JsonConvert.DeserializeObject<Conversation>(packet.Payload);
                OnStopTyping?.Invoke(deserialized.ConversationId);
            });

            _socket.On("problem", (socket, packet, args) =>
            {
                CharismaLogger.Log("Event received: `problem`");

                var deserialized = JsonConvert.DeserializeObject<CharismaError>(packet.Payload);
                CharismaLogger.Log(deserialized.Error);
            });
        }

        // Disconnect from the current interaction.
        public void Disconnect()
        {
            if (!_socket.IsOpen) return;

            try
            {
                _socket.Disconnect();
                _socket = null;
                _socketManager.Close();
                _socketManager = null;

                IsReadyToPlay = false;
            }
            catch (Exception e)
            {
                Debug.LogError($"Charisma: failed to disconnect: {e}");
                return;
            }

            CharismaLogger.Log("Successfully disconnected");
        }

        #endregion

        #region Interaction

        /// <summary>
        /// Start the story from selected scene.
        /// </summary>
        /// <param name="sceneIndex">The scene to start from.</param>
        /// <param name="speechOptions">Speech settings for the interaction.</param>
        /// <param name="conversationId">Id of the conversation we want to start.</param>
        public void Start(int conversationId, int sceneIndex, SpeechOptions speechOptions = null)
        {
            if (!IsReadyToPlay)
            {
                Debug.LogError("Charisma: Socket not open. Connect before starting the interaction");
                return;
            };

            // Initialise speech options
            _speechOptions = speechOptions;

            var startOptions = new StartOptions(conversationId, sceneIndex, speechOptions);

            CharismaLogger.Log("Sending `start` event to Charisma");
            _socket?.Emit("start", startOptions);
        }

        /// <summary>
        /// Start the story from selected scene.
        /// </summary>
        /// <param name="conversationId">Id of the conversation we want to resume.</param>
        /// <param name="speechOptions">Speech settings for the interaction.</param>
        public void Resume(int conversationId, SpeechOptions speechOptions = null)
        {
            if (!IsReadyToPlay)
            {
                Debug.LogError("Charisma: Socket not open. Connect before resuming the interaction");
                return;
            };

            // Initialise speech options
            _speechOptions = speechOptions;

            var resumeOptions = new ResumeOptions(conversationId, _speechOptions);

            CharismaLogger.Log("Sending `resume` event to Charisma");
            _socket?.Emit("resume", resumeOptions);
        }

        /// <summary>
        /// Send a tap event to Charisma.
        /// </summary>
        /// <param name="conversationId">Id of the conversation the tap should be sent to.</param>
        public void Tap(int conversationId)
        {
            if (!IsReadyToPlay)
            {
                Debug.LogError("Charisma: Socket not open. Connect before starting the interaction");
                return;
            };

            var tapOptions = new Tap(conversationId, _speechOptions);

            CharismaLogger.Log("Sending `tap` event to Charisma");
            _socket?.Emit("tap", tapOptions);
        }


        /// <summary>
        /// Send player response to Charisma.
        /// </summary>
        /// <param name="message">Message to send.</param>
        /// <param name="conversationId">Conversation to interact with.</param>
        public void Reply(int conversationId, string message)
        {
            if (!IsReadyToPlay)
            {
                Debug.LogError("Charisma: Socket not open. Connect before starting the interaction");
                return;
            };

            var playerMessage = new Reply(message, conversationId, _speechOptions);

            CharismaLogger.Log($"Sending `reply` event to Charisma:\nMessage: {message}\nConversation: {conversationId}");
            _socket?.Emit("reply", playerMessage);
        }

        #endregion
    }

    public class Conversation
    {
        /// <summary>
        /// The id of the conversation we have just initialized.
        /// </summary>
        public int ConversationId { get; }

        [JsonConstructor]
        public Conversation(int conversationId)
        {
            this.ConversationId = conversationId;
        }
    }

    public class Reply
    {
        public int conversationId;
        public string text;
        public SpeechOptions speechConfig;

        /// <summary>
        /// Player response to Charisma.
        /// </summary>
        /// <param name="text">Message to send</param>
        /// <param name="speechConfig">Changes the speech settings of the interaction.
        ///  - Don't pass unless you want to change settings.'</param>
        /// <param name="conversationId">Id of the conversation to send the reply to.</param>
        public Reply(string text, int conversationId, SpeechOptions speechConfig = null)
        {
            this.text = text;
            this.speechConfig = speechConfig;
            this.conversationId = conversationId;
        }
    }

    public class Tap
    {
        public int conversationId;
        public SpeechOptions speechConfig;

        public Tap(int conversationId, SpeechOptions speechConfig = null)
        {
            this.conversationId = conversationId;
            this.speechConfig = speechConfig;
        }
    }

    public class StartOptions
    {
        /// <summary>
        /// Options with which to start the interaction with Charisma.
        /// </summary>
        /// <param name="conversationId">Id of the conversation to start.</param>
        /// <param name="sceneIndex">Index of the scene to start.</param>
        /// <param name="speechConfig">To use speech, pass speech options.</param>
        public StartOptions(int conversationId, int sceneIndex, SpeechOptions speechConfig = null)
        {
            this.conversationId = conversationId;
            this.sceneIndex = sceneIndex;
            this.speechConfig = speechConfig;
        }

        public int conversationId { get; set; }
        public int sceneIndex { get; }
        public SpeechOptions speechConfig { get; }
    }

    public class ResumeOptions
    {
        /// <summary>
        /// Options with which to resume a playthrough in Charisma.
        /// </summary>
        /// <param name="conversationId">Id of the conversation to resume.</param>
        /// <param name="speechConfig">To use speech, pass speech options.</param>
        public ResumeOptions(int conversationId, SpeechOptions speechConfig = null)
        {
            this.conversationId = conversationId;
            this.speechConfig = speechConfig;
        }

        public int conversationId { get; set; }
        public SpeechOptions speechConfig { get; }
    }

    public class CharismaError
    {
        public string Error { get; }

        [JsonConstructor]
        public CharismaError(string error)
        {
            Error = error;
        }
    }
}
