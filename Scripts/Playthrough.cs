using System;
using Newtonsoft.Json;
using UnityEngine;
using Colyseus;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Collections;
using UnityEngine.Networking;

namespace CharismaSDK
{
    /// <summary>
    /// Interact with Charisma using this object.
    /// </summary>
    public class Playthrough
    {
        #region Enums
        public enum ConnectionState
        {
            Disconnected,
            Connecting,
            Connected,
            Reconnecting
        }
        #endregion

        #region Static Variables

        private const string BaseUrl = "wss://play.charisma.ai";

        // Ping constants
        private const float TIME_BETWEEN_PINGS = 2.0f;
        private const int MINIMUM_PINGS_TO_CONSIDER_FAILED = 3;

        // Reconnection constants
        private const int MAXIMUM_RECONNECTION_ATTEMPTS = 60;

        #endregion

        #region Properties

        /// <summary>
        /// The last token that was generated.
        /// </summary>
        public string Token { get; }

        /// <summary>
        /// The UUID of the playthrough.
        /// </summary>
        public string PlaythroughUuid { get; }

        /// <summary>
        /// Assign a new Speech config.
        ///  - To add speech, pass in a new speech config.
        ///  - To remove audio, set this to null.
        /// </summary>
        public SpeechOptions SpeechOptions { get; set; }

        #endregion

        #region Degelates

        public delegate void MessageDelegate(Events.MessageEvent message);
        public delegate void StartTypingDelegate(Events.StartTypingEvent message);
        public delegate void StopTypingDelegate(Events.StopTypingEvent message);
        public delegate void ConnectionStateChangeDelegate(ConnectionState connectionState);
        public delegate void SpeechRecognitionResultDelegate(object message);
        public delegate void PingSuccessDelegate();
        public delegate void PingFailureDelegate();

        #endregion

        #region Events

        /// <summary>
        /// Called when a new message has been generated by Charisma.
        /// </summary>
        public event MessageDelegate OnMessage;

        /// <summary>
        /// Called when a character has started typing.
        /// </summary>
        public event StartTypingDelegate OnStartTyping;

        /// <summary>
        /// Called when a character has stopped typing.
        /// </summary>
        public event StopTypingDelegate OnStopTyping;

        /// <summary>
        /// Called when the connection state of the playthrough to Charisma changes.
        /// </summary>
        public event ConnectionStateChangeDelegate OnConnectionStateChange;

        /// <summary>
        /// Called when a speech recognition result has been received.
        /// </summary>
        public event SpeechRecognitionResultDelegate OnSpeechRecognitionResult;

        /// <summary>
        /// Called when a pong event is received succesfully from the Playthrough host.
        /// </summary>
        public event PingSuccessDelegate OnPingSuccess;

        /// <summary>
        /// Called when a ping event has failed to trigger a pong from the Playthrough host.
        /// </summary>
        public event PingFailureDelegate OnPingFailure;

        #endregion

        #region MemberVariables
        private Action _onReadyCallback;

        private ColyseusClient _client;
        private Dictionary<string, object> _roomOptions;
        private ColyseusRoom<object> _room;

        private Microphone microphone;

        private ConnectionState _connectionState;

        private int _pingCount = 0;
        private int _reconnectionTryCount = 0;

        private float _reconnectionTryDelay = 5.0f;

        private bool _calledByDisconnect;

        #endregion

        #region Constructors

        /// <summary>
        /// Interaction with Charisma
        /// </summary>
        /// <param name="token">A valid play-though token.</param>
        public Playthrough(string token, string playthroughUuid, SpeechOptions speechOptions = null)
        {
            Token = token;
            PlaythroughUuid = playthroughUuid;
            SpeechOptions = speechOptions;
            SetConnectionState(ConnectionState.Disconnected);
        }

        ~Playthrough()
        {
            Disconnect();
        }

        #endregion

        #region Connect / Disconnect

        /// <summary>
        /// Connect to Charisma
        /// </summary>
        /// <param name="onReadyCallback">Called when successfully connected to Charisma.</param>
        public async void Connect(Action onReadyCallback)
        {
            if (IsConnected())
            {
                Logger.Log("Playthrough is already connected. Exiting early.");
                return;
            }

            SetConnectionState(ConnectionState.Connecting);

            _onReadyCallback = onReadyCallback;

            await CreateClientAndJoinRoom();
        }

        // Disconnect from the current interaction.
        public void Disconnect()
        {
            if (!HasBeenDisconnected())
            {
                Logger.Log("Playthrough is already disconnected. Exiting early.");
                return;
            }

            try
            {
                _room?.Leave();
                _room = null;

                _client = null;

                // Disconnected manually set to true.
                _calledByDisconnect = true;

                SetConnectionState(ConnectionState.Disconnected);
            }
            catch (Exception e)
            {
                Logger.LogError($"Failed to disconnect: {e}");
                return;
            }

            Logger.Log("Successfully disconnected");
        }

        #endregion

        #region Interaction

        public void SetSpeechConfig(SpeechOptions speechOptions)
        {
            SpeechOptions = speechOptions;
        }

        /// <summary>
        /// Starts the story. Can be from a particular scene or subplot, or the beginning of the story, depending on the value of the `startOptions` parameter.
        /// </summary>
        /// <param name="startOptions">Options to send with the `start` event.</param>
        public void Start(
            string conversationUuid,
            int? sceneIndex = null,
            string startGraphReferenceId = null
        )
        {
            if (!IsConnected())
            {
                Logger.LogError("Socket not open. Connect before starting the interaction");
                return;
            };

            var startEvent = new Events.StartEvent(conversationUuid, sceneIndex, startGraphReferenceId, SpeechOptions);

            Logger.Log($"Sending `start` event: {JsonConvert.SerializeObject(startEvent)}");
            _room?.Send("start", startEvent);
        }

        /// <summary>
        /// Start the story from selected scene.
        /// </summary>
        /// <param name="conversationUuid">Id of the conversation we want to resume.</param>
        public void Resume(string conversationUuid)
        {
            if (!IsConnected())
            {
                Logger.LogError("Socket not open. Connect before resuming the interaction");
                return;
            };

            var resumeEvent = new Events.ResumeEvent(conversationUuid, SpeechOptions);

            Logger.Log($"Sending `resume` event: {JsonConvert.SerializeObject(resumeEvent)}");
            _room?.Send("resume", resumeEvent);
        }

        /// <summary>
        /// Send a tap event to Charisma.
        /// </summary>
        /// <param name="conversationUuid">Id of the conversation the tap should be sent to.</param>
        public void Tap(string conversationUuid)
        {
            if (!IsConnected())
            {
                Logger.LogError("Socket not open. Connect before starting the interaction");
                return;
            };

            var tapEvent = new Events.TapEvent(conversationUuid, SpeechOptions);

            Logger.Log($"Sending `tap` event: {JsonConvert.SerializeObject(tapEvent)}");
            _room?.Send("tap", tapEvent);
        }


        /// <summary>
        /// Send player response to Charisma.
        /// </summary>
        /// <param name="text">Message to send.</param>
        /// <param name="conversationUuid">Conversation to interact with.</param>
        public void Reply(string conversationUuid, string text)
        {
            if (!IsConnected())
            {
                Logger.LogError("Socket not open. Connect before starting the interaction");
                return;
            };

            var replyEvent = new Events.ReplyEvent(conversationUuid, text, SpeechOptions);

            Logger.Log($"Sending `reply` event: {JsonConvert.SerializeObject(replyEvent)}");
            _room?.Send("reply", replyEvent);
        }

        /// <summary>
        /// Send player action to Charisma.
        /// </summary>
        /// <param name="action">The action to send.</param>
        /// <param name="conversationUuid">Conversation to interact with.</param>
        public void Action(string conversationUuid, string action)
        {
            if (!IsConnected())
            {
                Logger.LogError("Socket not open. Connect before starting the interaction");
                return;
            };

            var actionEvent = new Events.ActionEvent(conversationUuid, action, SpeechOptions);

            Logger.Log($"Sending `action` event: {JsonConvert.SerializeObject(actionEvent)}");
            _room?.Send("action", actionEvent);
        }

        public void Pause()
        {
            if (!IsConnected())
            {
                Logger.LogError("Socket not open. Connect before starting the interaction");
                return;
            };

            Logger.Log("Sending `pause` event");
            _room?.Send("pause");
        }

        public void Play()
        {
            if (!IsConnected())
            {
                Logger.LogError("Socket not open. Connect before starting the interaction");
                return;
            };

            Logger.Log("Sending `play` event");
            _room?.Send("play");
        }

        public void StartSpeechRecognition(GameObject gameObject, int microphoneId = 0)
        {
            if (!IsConnected())
            {
                Logger.LogError("Socket not open. Connect before starting the interaction");
                return;
            };

            if (microphone == null)
                microphone = gameObject.TryGetComponent(out Microphone mic) ? mic : gameObject.AddComponent<Microphone>();

            microphone.Initialize(microphoneId);
            microphone.micCallbackDelegate += data => _room?.Send("speech-recognition-chunk", data);

            var speechRecognitionOptions = new Dictionary<string, object> { ["service"] = "aws" };
            _room?.Send("speech-recognition-start", speechRecognitionOptions);
            microphone.StartListening();
        }

        public void StopSpeechRecognition()
        {
            _room?.Send("speech-recognition-stop");
            microphone.micCallbackDelegate = null;
            microphone.StopListening();
        }

        #endregion

        #region Private functions
        private void SetConnectionState(ConnectionState connectionState)
        {
            if(_connectionState != connectionState)
            {
                Logger.Log($"Setting connection state to {connectionState}.");
                _connectionState = connectionState;
                OnConnectionStateChange?.Invoke(connectionState);
            }
        }

        private bool IsConnected()
        {
            return _connectionState == ConnectionState.Connected;
        }

        private bool HasBeenDisconnected()
        {
            return _connectionState == ConnectionState.Disconnected;
        }

        private async Task CreateClientAndJoinRoom()
        {
            _client = new ColyseusClient(BaseUrl);

            _roomOptions = new Dictionary<string, object>
            {
                ["token"] = Token,
                ["playthroughId"] = PlaythroughUuid,
                ["sdkInfo"] = new Dictionary<string, object>
                {
                    ["sdkId"] = "unity",
                    ["sdkVersion"] = "0.1.0",
                    ["protocolVersion"] = 1
                }
            };

            ColyseusRoom<dynamic> room = await _client.JoinOrCreate(
                "chat",
                _roomOptions
            );

            _room = room;
            AssignRoomCallbacks();
        }

        private void AssignRoomCallbacks()
        {
            _room.OnJoin += () =>
            {
                Logger.Log("Successfully connected to playthrough");
            };


            _room.OnError += (code, message) =>
            {
                Logger.LogError($"There was an error connecting to the playthrough. Code: {code}. Message: {message}");
            };

            _room.OnMessage<string>("status", (status) =>
            {
                Logger.Log($"Received `status` event: {JsonConvert.SerializeObject(status)}");
                if (status == "ready")
                {
                    Logger.Log("Ready to begin play");
                    OnReady();
                }
            });

            _room.OnMessage<Events.MessageEvent>("message", (message) =>
            {
                Logger.Log($"Received `message` event: {JsonConvert.SerializeObject(message)}");
                OnMessage?.Invoke(message);
            });

            _room.OnMessage<Events.StartTypingEvent>("start-typing", (message) =>
            {
                Logger.Log($"Received `start-typing` event: {JsonConvert.SerializeObject(message)}");
                OnStartTyping?.Invoke(message);
            });

            _room.OnMessage<Events.StopTypingEvent>("stop-typing", (message) =>
            {
                Logger.Log($"Received `stop-typing` event: {JsonConvert.SerializeObject(message)}");
                OnStopTyping?.Invoke(message);
            });

            _room.OnMessage<Events.ProblemEvent>("problem", (message) =>
            {
                Logger.LogWarning($"Received `problem` event: {JsonConvert.SerializeObject(message)}");
            });

            _room.OnMessage<string>("pong", (message) =>
            {
                _pingCount = 0;
                OnPingSuccess?.Invoke();
                SetConnectionState(ConnectionState.Connected);
            });

            _room.OnMessage<object>("speech-recognition-result", (message) =>
            {
                Logger.Log($"Received `speech-recognition-result` event: {JsonConvert.SerializeObject(message)}");
                OnSpeechRecognitionResult?.Invoke(message);
            });

            _room.OnLeave += (code) =>
            {
                Logger.Log($"Connection closed. Attempting to reconnect to Playthrough.");
                MainThreadConsumer.Instance?.StartCoroutine(TryToReconnect());
            };
        }

        private void OnReady()
        {
            SetConnectionState(ConnectionState.Connected);

            _onReadyCallback?.Invoke();

            _calledByDisconnect = false;
            _reconnectionTryCount = 0;

            Task.Run(FirePing);
        }

        private IEnumerator TryToReconnect()
        {
            Logger.Log("Trying to reconnect.");
            if (_calledByDisconnect)
            {
                SetConnectionState(ConnectionState.Disconnected);
                yield break;
            }

            SetConnectionState(ConnectionState.Reconnecting);

            MainThreadConsumer.Instance.StartCoroutine(Reconnect());
        }

        private IEnumerator Reconnect()
        {
            ColyseusRoom<object> room = null;

            while (room == null)
            {
                // Try to reconnect
                _reconnectionTryCount++;

                if (_reconnectionTryCount <= MAXIMUM_RECONNECTION_ATTEMPTS)
                {
                    _client.Settings.useSecureProtocol = true;
                    var t = _client.Reconnect(_room.Id, _room.SessionId);

                    yield return new WaitUntil(() => t.IsCompleted);

                    try
                    {
                        room = t.Result;

                        Logger.Log($"Succesfully reconnected.");

                        _room = room;
                        AssignRoomCallbacks();
                        SetConnectionState(ConnectionState.Connected);
                        yield break;
                    }
                    catch (Exception e)
                    {
                        Logger.LogWarning($"Failed to reconnect - exception: {e.Message}");
                    }

                    float timePassed = 0f;
                    while (timePassed < _reconnectionTryDelay)
                    {
                        yield return new WaitForEndOfFrame();
                        timePassed += Time.deltaTime;
                    }
                }
                else
                {
                    Logger.Log("Reached reconnection attempt limit - disconnecting...");
                    SetConnectionState(ConnectionState.Disconnected);
                    break;
                }
            }
        }

        private void FirePing()
        {
            if (!IsConnected())
            {
                return;
            }

            _room?.Send("ping");

            _pingCount++;
            if(_pingCount >= MINIMUM_PINGS_TO_CONSIDER_FAILED)
            {
                Logger.LogError($"Ping timed out.");
                SetConnectionState(ConnectionState.Disconnected);

                OnPingFailure?.Invoke();
                return;
            }

            // Fire another ping after a delay.
            Task.Run(async delegate
            {
                await Task.Delay(TimeSpan.FromSeconds(TIME_BETWEEN_PINGS));
                FirePing();
            });
        }
        #endregion
    }
}
