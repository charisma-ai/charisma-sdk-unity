using System;
using Newtonsoft.Json;
using UnityEngine;
using Colyseus;
using System.Collections.Generic;

namespace CharismaSDK
{
    /// <summary>
    /// Interact with Charisma using this object.
    /// </summary>
    public class Playthrough
    {
        #region Static Variables

        private const string BaseUrl = "wss://play.charisma.ai";

        #endregion

        #region Properties

        /// <summary>
        /// Returns true if the socket is open.
        /// </summary>
        public bool IsConnected => _room != null && _room.colyseusConnection.IsOpen;

        /// <summary>
        /// The last token that was generated.
        /// </summary>
        public string Token { get; }

        /// <summary>
        /// The UUID of the playthrough.
        /// </summary>
        public string PlaythroughUuid { get; }

        /// <summary>
        /// A successful connection to the socket has been made. Charisma is ready to start play.
        /// </summary>
        public bool IsReadyToPlay { get; set; }

        /// <summary>
        /// Assign a new Speech config.
        ///  - To add speech, pass in a new speech config.
        ///  - To remove audio, set this to null.
        /// </summary>
        public SpeechOptions SpeechOptions { get; set; }

        #endregion

        #region Degelates

        public delegate void MessageDelegate(Events.MessageEvent message);
        public delegate void StartTypingDelegate(Events.StartTypingEvent message);
        public delegate void StopTypingDelegate(Events.StopTypingEvent message);

        #endregion

        #region Events

        /// <summary>
        /// Called when a new message has been generated by Charisma.
        /// </summary>
        public event MessageDelegate OnMessage;

        /// <summary>
        /// Called when a character has started typing.
        /// </summary>
        public event StartTypingDelegate OnStartTyping;

        /// <summary>
        /// Called when a character has stopped typing.
        /// </summary>
        public event StopTypingDelegate OnStopTyping;

        #endregion

        #region MemberVariables

        private ColyseusClient _client;
        private ColyseusRoom<object> _room;

        #endregion

        #region Constructors

        /// <summary>
        /// Interaction with Charisma
        /// </summary>
        /// <param name="token">A valid play-though token.</param>
        public Playthrough(string token, string playthroughUuid, SpeechOptions speechOptions = null)
        {
            Token = token;
            PlaythroughUuid = playthroughUuid;
            SpeechOptions = speechOptions;
        }

        ~Playthrough()
        {
            Disconnect();
        }

        #endregion

        #region Connect / Disconnect

        /// <summary>
        /// Connect to Charisma
        /// </summary>
        /// <param name="onReadyCallback">Called when successfully connected to Charisma.</param>
        public async void Connect(Action onReadyCallback)
        {
            if (IsConnected) return;

            ColyseusClient client = new ColyseusClient(BaseUrl);

            Dictionary<string, object> roomOptions = new Dictionary<string, object>
            {
                ["token"] = Token,
                ["playthroughId"] = PlaythroughUuid,
                ["sdkInfo"] = new Dictionary<string, object>
                    {
                        ["sdkId"] = "unity",
                        ["sdkVersion"] = "0.1.0",
                        ["protocolVersion"] = 1
                    }
            };

            ColyseusRoom<dynamic> room = await client.JoinOrCreate(
                "chat",
                roomOptions
            );

            _room = room;

            room.OnJoin += () =>
            {
                Logger.Log("Successfully connected to playthrough");
            };

            room.OnError += (code, message) =>
            {
                Logger.LogError($"There was an error connecting to the playthrough. Code: {code}. Message: {message}");
            };

            room.OnMessage<string>("status", (status) =>
            {
                Logger.Log($"Received `status` event: {JsonConvert.SerializeObject(status)}");
                if (status == "ready")
                {
                    Logger.Log("Ready to begin play");
                    IsReadyToPlay = true;

                    onReadyCallback?.Invoke();
                }
            });

            room.OnMessage<Events.MessageEvent>("message", (message) =>
            {
                Logger.Log($"Received `message` event: {JsonConvert.SerializeObject(message)}");
                OnMessage?.Invoke(message);
            });

            room.OnMessage<Events.StartTypingEvent>("start-typing", (message) =>
            {
                Logger.Log($"Received `start-typing` event: {JsonConvert.SerializeObject(message)}");
                OnStartTyping?.Invoke(message);
            });

            room.OnMessage<Events.StopTypingEvent>("stop-typing", (message) =>
            {
                Logger.Log($"Received `stop-typing` event: {JsonConvert.SerializeObject(message)}");
                OnStopTyping?.Invoke(message);
            });

            room.OnMessage<Events.ProblemEvent>("problem", (message) =>
            {
                Logger.LogWarning($"Received `problem` event: {JsonConvert.SerializeObject(message)}");
            });
        }

        // Disconnect from the current interaction.
        public void Disconnect()
        {
            if (!IsConnected) return;

            try
            {
                _room.Leave();
                _room = null;

                IsReadyToPlay = false;
            }
            catch (Exception e)
            {
                Logger.LogError($"Failed to disconnect: {e}");
                return;
            }

            Logger.Log("Successfully disconnected");
        }

        #endregion

        #region Interaction

        public void SetSpeechConfig(SpeechOptions speechOptions)
        {
            SpeechOptions = speechOptions;
        }

        /// <summary>
        /// Starts the story. Can be from a particular scene or subplot, or the beginning of the story, depending on the value of the `startOptions` parameter.
        /// </summary>
        /// <param name="startOptions">Options to send with the `start` event.</param>
        public void Start(
            string conversationUuid,
            int? sceneIndex = null,
            string startGraphReferenceId = null
        )
        {
            if (!IsReadyToPlay)
            {
                Logger.LogError("Socket not open. Connect before starting the interaction");
                return;
            };

            var startEvent = new Events.StartEvent(conversationUuid, sceneIndex, startGraphReferenceId, SpeechOptions);

            Logger.Log($"Sending `start` event: {JsonConvert.SerializeObject(startEvent)}");
            _room?.Send("start", startEvent);
        }

        /// <summary>
        /// Start the story from selected scene.
        /// </summary>
        /// <param name="conversationUuid">Id of the conversation we want to resume.</param>
        public void Resume(string conversationUuid)
        {
            if (!IsReadyToPlay)
            {
                Logger.LogError("Socket not open. Connect before resuming the interaction");
                return;
            };

            var resumeEvent = new Events.ResumeEvent(conversationUuid, SpeechOptions);

            Logger.Log($"Sending `resume` event: {JsonConvert.SerializeObject(resumeEvent)}");
            _room?.Send("resume", resumeEvent);
        }

        /// <summary>
        /// Send a tap event to Charisma.
        /// </summary>
        /// <param name="conversationUuid">Id of the conversation the tap should be sent to.</param>
        public void Tap(string conversationUuid)
        {
            if (!IsReadyToPlay)
            {
                Logger.LogError("Socket not open. Connect before starting the interaction");
                return;
            };

            var tapEvent = new Events.TapEvent(conversationUuid, SpeechOptions);

            Logger.Log($"Sending `tap` event: {JsonConvert.SerializeObject(tapEvent)}");
            _room?.Send("tap", tapEvent);
        }


        /// <summary>
        /// Send player response to Charisma.
        /// </summary>
        /// <param name="text">Message to send.</param>
        /// <param name="conversationUuid">Conversation to interact with.</param>
        public void Reply(string conversationUuid, string text)
        {
            if (!IsReadyToPlay)
            {
                Logger.LogError("Socket not open. Connect before starting the interaction");
                return;
            };

            var replyEvent = new Events.ReplyEvent(conversationUuid, text, SpeechOptions);

            Logger.Log($"Sending `reply` event: {JsonConvert.SerializeObject(replyEvent)}");
            _room?.Send("reply", replyEvent);
        }

        #endregion
    }
}
