using System;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace CharismaSdk
{   
    public enum CharismaMessageType
    {
        character,
        media
    }
    
    public class Response
    {
        /// <summary>
        /// Message generated by Charisma.
        /// </summary>
        [JsonConstructor]
        public Response(int conversationId, CharismaMessageType messageType, Message message, bool endStory,
            bool tapToContinue, CharacterMood[] characterMoods, Memory[] memories, string eventId, ulong timestamp,
            Impacts impacts)
        {
            this.ConversationId = conversationId;
            this.CharismaMessageType = messageType;
            this.Message = message;
            this.EndStory = endStory;
            this.CharacterMoods = characterMoods;
            this.TapToContinue = tapToContinue;
            this.Memories = memories;
            this.EventId = long.Parse(eventId);
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// The conversation id of the message.
        /// </summary>
        public int ConversationId { get; }
        
        /// <summary>
        /// The type of this message.
        /// </summary>
        public CharismaMessageType CharismaMessageType { get; }
        
        /// <summary>
        /// Contents of the message.
        /// </summary>
        public Message Message { get; }
        
        /// <summary>
        /// True if the node this message was generated from has "End Story" activated.
        /// </summary>
        public bool EndStory { get; }
        
        /// <summary>
        /// True if the node this message was generate from has "Tap To Continue" activated.
        /// </summary>
        public bool TapToContinue { get; }
        
        /// <summary>
        /// List of character moods which has changed on this node.
        /// </summary>
        public CharacterMood[] CharacterMoods { get; }
        
        /// <summary>
        /// List of memories which has changed since the last character node.
        /// </summary>
        public Memory[] Memories { get; }
        
        public long EventId { get; }
        public ulong Timestamp { get; }
    }

    public class Impacts
    {
        [JsonConstructor]
        public Impacts(int[] id, string impact)
        {
            Id = id;
            Impact = impact;
        }
        
        public int[] Id { get; }
        public string Impact { get; }
    }

    /// <summary>
    /// Contains data related to a characters response such as, text, audio etc.
    /// </summary>
    public class Message
    {
        [JsonConstructor]
        public Message(string text, Character character, Speech speech,
            Dictionary<string, string> metadata)
        {
            this.Character = character;
            this.Text = text;
            this.Speech = speech;
            this.Metadata = metadata;
        }

        /// <summary>
        /// The text of the response.
        /// </summary>
        public string Text { get; }

        /// <summary>
        /// The character that spoke / said something.
        /// </summary>
        public Character Character { get; }

        /// <summary>
        /// The audio information generated by the speech on this node
        /// </summary>
        public Speech Speech { get; }

        /// <summary>
        /// Metadata attached to this node.
        /// </summary>
        public Dictionary<string, string> Metadata { get; }
    }
}
